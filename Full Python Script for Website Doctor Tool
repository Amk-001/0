import requests
from bs4 import BeautifulSoup

def check_connection(url):
    """
    Tests the connection to the given URL and reports the status.
    
    Args:
        url (str): The website URL to check.
    """
    try:
        response = requests.get(url)
        if response.status_code == 200:
            print(f"Connection Successful: {url}")
        else:
            print(f"Connection Failed: {url}, Status Code: {response.status_code}")
    except Exception as e:
        print(f"Error Connecting to {url}: {e}")

def check_html_errors(html_content):
    """
    Analyzes the HTML content for missing <title> and <meta> tags.
    
    Args:
        html_content (str): The HTML content of the website.
    
    Returns:
        list: A list of HTML errors found in the content.
    """
    soup = BeautifulSoup(html_content, 'html.parser')
    errors = []
    
    if not soup.title:
        errors.append("Missing <title> tag.")
    if not soup.meta:
        errors.append("Missing <meta> tag.")
    
    return errors

def website_doctor(url):
    """
    Analyzes the website by checking its connection and HTML errors.
    
    Args:
        url (str): The website URL to analyze.
    """
    print(f"Analyzing {url}...\n")
    
    # Check the connection status
    check_connection(url)
    
    # Get HTML content and check for errors
    try:
        response = requests.get(url)
        html_errors = check_html_errors(response.text)
        
        print("\nHTML Errors:")
        for error in html_errors:
            print(f"- {error}")
    except Exception as e:
        print(f"Error Analyzing HTML: {e}")

# Main function to execute the tool
def main():
    """
    Main function to execute the Website Doctor tool.

    Description:
        This tool is designed to analyze websites for connectivity issues and HTML errors.
        It performs the following key functions:
        
        1. **Connection Testing**:
            - Sends an HTTP GET request to the specified URL.
            - Validates if the website is reachable.
            - Reports the status of the connection with details:
                - Success: Prints a message indicating the website is accessible.
                - Failure: Reports HTTP status codes (e.g., 404, 500).
                - Error: Handles exceptions such as timeouts or invalid URLs.
        
        2. **HTML Validation**:
            - Parses the website's HTML content using BeautifulSoup.
            - Checks for common HTML issues:
                - Missing essential tags, such as <title> and <meta>.
                - Reports these issues for better debugging and improvements.
        
        3. **Comprehensive Website Diagnosis**:
            - Combines connection testing and HTML validation to provide a full diagnostic report.
            - Handles exceptions gracefully, ensuring the tool continues to run even if errors occur.
    
    Usage:
        - Execute the script directly in a Python environment.
        - Enter a valid website URL when prompted.
        - Review the connectivity and HTML diagnostic results provided by the tool.
    """
    url = input("Enter the website URL: ")
    website_doctor(url)

# Execute the main function if the script is run directly
if __name__ == "__main__":
    main()
